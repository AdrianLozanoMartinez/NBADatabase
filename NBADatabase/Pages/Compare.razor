@page "/compare"
@using System.Net.Http.Json;

@using BlazorBootstrap.Extensions
@using Color = System.Drawing.Color
@using Newtonsoft.Json;
@using System.Collections.Generic;
@using System.IO;


    @*@if (!playerSelected1 && !playerSelected2)
    {
        <div id="filtrar">
            <div>
                <label for="player-search"><b>BUSCAR JUGADOR :</b></label>
                <input style="width:250px; margin-left:45px;" @bind="searchTerm" placeholder="Nombre primer jugador" />
            </div>
            <div class="result">
                <ul>
                    @foreach (var player in filteredPlayers)
                    {
                        <li><a @onclick="() => SelectPlayer(player)"><b>- @player.Player_name</b></a></li>
                    }
                </ul>
            </div>
        </div>
    }
    else if (playerSelected1 && !playerSelected2)
    {
        <div class="fistPlayer">
            <p><b>Primer jugador seleccionado:</b></p>
            <p style="text-decoration:underline; font-size:large;"><b>@selectedPlayer1.Player_name</b></p>
        </div>
        
        <div id="filtrar2">
            <label for="player-search"><b>BUSCAR SEGUNDO JUGADOR :</b></label>
            <input style="width:250px; margin-left:45px;" @bind="searchTerm" placeholder="Nombre segundo jugador" />
            <div class="result2">
                <ul>
                    @foreach (var player in filteredPlayers)
                    {
                    <li><a @onclick="() => SelectPlayer(player, true)"><b>- @player.Player_name</b></a></li>
                    }
                </ul>
            </div>
        </div>
    }
    else if (playerSelected1 && playerSelected2)
    {
        <div class="fistPlayer">
            <p><b>Primer jugador seleccionado:</b></p>
            <p style="text-decoration:underline; font-size:large;"><b>@selectedPlayer1.Player_name</b></p>
        </div>
        <div class="secondPlayer">
            <p><b>Segundo jugador seleccionado:</b></p>
            <p style="text-decoration:underline; font-size:large;"><b>@selectedPlayer2.Player_name</b></p>
        </div>

        <BarChart @ref="barChart" Width="800" Class="mb-4" Style="position:absolute;background-color:white; border-radius:5px;top:180px;left:400px;" />
    }


@code {
    @inject HttpClient Http

    public List<Player> Players { get; set; }
    private Player selectedPlayer1;
    private Player selectedPlayer2;
    private bool playerSelected1 = false;
    private bool playerSelected2 = false;

    protected override async Task OnInitializedAsync()
    {
        Players = await Http.GetFromJsonAsync<List<Player>>("/assets/data/datas.json");
    }

    public class Player
    {
        public string Player_name { get; set; }
        public int Age { get; set; }
        public double Player_height { get; set; }
        public double Player_weight { get; set; }
        public string Team_abbreviation { get; set; }
        public string College { get; set; }
        public string Country { get; set; }
        public string Draft_year { get; set; }
        public int Gp { get; set; }
        public double Pts { get; set; }
        public double Reb { get; set; }
        public double Ast { get; set; }
        public string Season { get; set; }
        public string Player_heightM { get; set; }
        public string Player_weightG => $"{Player_weight:0.00}";
    }

    private string searchTerm = "";

    private List<Player> filteredPlayers => Players.Where(p => p.Player_name.IndexOf(searchTerm, StringComparison.OrdinalIgnoreCase) >= 0).ToList();

    private void SelectPlayer(Player player, bool isSecondPlayer = false)
    {
        if (!playerSelected1)
        {
            selectedPlayer1 = player;
            playerSelected1 = true;
        }
        else if (!playerSelected2 && isSecondPlayer)
        {
            selectedPlayer2 = player;
            playerSelected2 = true;
        }
    }

    private BarChart barChart;
    private ChartData chartData;
    private BarChartOptions chartOptions;
    private bool showChart = false;
    private bool chartInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!chartInitialized && playerSelected1 && playerSelected2)
        {
            // Crear el objeto de datos de la gráfica
            chartData = new ChartData
                {
                    Labels = new List<string> { "Edad", "Altura", "Peso", "Partidos", "Puntos", "Rebotes", "Asistencias" },
                    Datasets = new List<IChartDataset>()
                };

            // Agregar los datos del primer jugador a la gráfica
            var player1Data = GetPlayerBarChartDataset(selectedPlayer1);
            chartData.Datasets.Add(player1Data);

            // Agregar los datos del segundo jugador a la gráfica
            var player2Data = GetPlayerBarChartDataset(selectedPlayer2);
            chartData.Datasets.Add(player2Data);

            // Configurar las opciones de la gráfica
            chartOptions = new BarChartOptions
                {
                    Responsive = true,
                    Interaction = new Interaction { Mode = InteractionMode.Index }
                };

            showChart = true;
            await barChart.UpdateAsync(chartData, chartOptions);

            chartInitialized = true;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private BarChartDataset GetPlayerBarChartDataset(Player player)
    {
        // Configurar los datos del jugador en la gráfica
        return new BarChartDataset()
            {
                Label = player.Player_name,
                Data = new List<double> { player.Age, player.Player_height, player.Player_weight, player.Gp, player.Pts, player.Ast, player.Reb },
                BackgroundColor = new List<string> { "rgba(0, 123, 255, 0.2)" },
                BorderColor = new List<string> { "rgba(0, 12, 20, 1)" },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 }
            };
    }

}*@